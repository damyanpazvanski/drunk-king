"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var data_1 = require("./data");
var CardService = /** @class */ (function () {
    function CardService() {
        this.deck = {};
        this.usedCards = [];
        this.suits = [];
        this.count = 0;
        this.suits = ['C', 'S', 'H', 'D'];
        this.deck[this.suits[0]] = data_1.default.cards;
        this.deck[this.suits[1]] = data_1.default.cards;
        this.deck[this.suits[2]] = data_1.default.cards;
        this.deck[this.suits[3]] = data_1.default.cards;
    }
    CardService.prototype.chooseCard = function () {
        return this.searchCard(Math.floor(Math.random() * 52), 1);
    };
    CardService.prototype.refresh = function () {
        this.usedCards = [];
    };
    CardService.prototype.getCount = function () {
        if (this.count === 0) {
            for (var suit in this.deck) {
                this.count += this.deck[suit].length;
            }
        }
        return this.count - this.usedCards.length;
    };
    CardService.prototype.searchCard = function (cardIndex, times) {
        if (times > 2 || cardIndex > 51) {
            return false;
        }
        else if (cardIndex < 0) {
            return this.searchCard(51, ++times);
        }
        if (this.usedCards.includes(cardIndex)) {
            return this.searchCard(cardIndex - 1, times);
        }
        var suitIndex = Math.floor(cardIndex / 13);
        var index = cardIndex - (suitIndex * 13);
        var card = this.deck[this.suits[suitIndex]][index];
        card['suit'] = {
            index: suitIndex,
            name: this.suits[suitIndex]
        };
        this.usedCards.push(cardIndex);
        return card;
    };
    CardService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], CardService);
    return CardService;
}());
exports.CardService = CardService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2FyZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJDO0FBQzNDLCtCQUEyQjtBQUczQjtJQU1JO1FBTFEsU0FBSSxHQUFHLEVBQUUsQ0FBQztRQUNWLGNBQVMsR0FBRyxFQUFFLENBQUM7UUFDZixVQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ1gsVUFBSyxHQUFHLENBQUMsQ0FBQztRQUdkLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxjQUFLLENBQUMsS0FBSyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLGNBQUssQ0FBQyxLQUFLLENBQUM7UUFDdkMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsY0FBSyxDQUFDLEtBQUssQ0FBQztRQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxjQUFLLENBQUMsS0FBSyxDQUFDO0lBQzNDLENBQUM7SUFFRCxnQ0FBVSxHQUFWO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVELDZCQUFPLEdBQVA7UUFDSSxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsOEJBQVEsR0FBUjtRQUNJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuQixHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDekIsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUN6QyxDQUFDO1FBQ0wsQ0FBQztRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQzlDLENBQUM7SUFFTyxnQ0FBVSxHQUFsQixVQUFtQixTQUFTLEVBQUUsS0FBSztRQUMvQixFQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzlCLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDakIsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN4QyxDQUFDO1FBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDakQsQ0FBQztRQUVELElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQzNDLElBQUksS0FBSyxHQUFHLFNBQVMsR0FBRyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUV6QyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVuRCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUc7WUFDWCxLQUFLLEVBQUUsU0FBUztZQUNoQixJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUM7U0FDOUIsQ0FBQztRQUNGLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRS9CLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQXJEUSxXQUFXO1FBRHZCLGlCQUFVLEVBQUU7O09BQ0EsV0FBVyxDQXNEdkI7SUFBRCxrQkFBQztDQUFBLEFBdERELElBc0RDO0FBdERZLGtDQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IGNhcmRzIGZyb20gJy4vZGF0YSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDYXJkU2VydmljZSB7XG4gICAgcHJpdmF0ZSBkZWNrID0ge307XG4gICAgcHJpdmF0ZSB1c2VkQ2FyZHMgPSBbXTtcbiAgICBwcml2YXRlIHN1aXRzID0gW107XG4gICAgcHJpdmF0ZSBjb3VudCA9IDA7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5zdWl0cyA9IFsnQycsICdTJywgJ0gnLCAnRCddO1xuICAgICAgICB0aGlzLmRlY2tbdGhpcy5zdWl0c1swXV0gPSBjYXJkcy5jYXJkcztcbiAgICAgICAgdGhpcy5kZWNrW3RoaXMuc3VpdHNbMV1dID0gY2FyZHMuY2FyZHM7XG4gICAgICAgIHRoaXMuZGVja1t0aGlzLnN1aXRzWzJdXSA9IGNhcmRzLmNhcmRzO1xuICAgICAgICB0aGlzLmRlY2tbdGhpcy5zdWl0c1szXV0gPSBjYXJkcy5jYXJkcztcbiAgICB9XG5cbiAgICBjaG9vc2VDYXJkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWFyY2hDYXJkKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDUyKSwgMSk7XG4gICAgfVxuXG4gICAgcmVmcmVzaCgpIHtcbiAgICAgICAgdGhpcy51c2VkQ2FyZHMgPSBbXTtcbiAgICB9XG5cbiAgICBnZXRDb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY291bnQgPT09IDApIHtcbiAgICAgICAgICAgIGZvciAobGV0IHN1aXQgaW4gdGhpcy5kZWNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb3VudCArPSB0aGlzLmRlY2tbc3VpdF0ubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY291bnQgLSB0aGlzLnVzZWRDYXJkcy5sZW5ndGg7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZWFyY2hDYXJkKGNhcmRJbmRleCwgdGltZXMpIHtcbiAgICAgICAgaWYgKHRpbWVzID4gMiB8fCBjYXJkSW5kZXggPiA1MSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKGNhcmRJbmRleCA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlYXJjaENhcmQoNTEsICsrdGltZXMpO1xuICAgICAgICB9IGlmICh0aGlzLnVzZWRDYXJkcy5pbmNsdWRlcyhjYXJkSW5kZXgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZWFyY2hDYXJkKGNhcmRJbmRleCAtIDEsIHRpbWVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBzdWl0SW5kZXggPSBNYXRoLmZsb29yKGNhcmRJbmRleCAvIDEzKTtcbiAgICAgICAgbGV0IGluZGV4ID0gY2FyZEluZGV4IC0gKHN1aXRJbmRleCAqIDEzKTtcblxuICAgICAgICBsZXQgY2FyZCA9IHRoaXMuZGVja1t0aGlzLnN1aXRzW3N1aXRJbmRleF1dW2luZGV4XTtcblxuICAgICAgICBjYXJkWydzdWl0J10gPSB7XG4gICAgICAgICAgICBpbmRleDogc3VpdEluZGV4LFxuICAgICAgICAgICAgbmFtZTogdGhpcy5zdWl0c1tzdWl0SW5kZXhdXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudXNlZENhcmRzLnB1c2goY2FyZEluZGV4KTtcblxuICAgICAgICByZXR1cm4gY2FyZDtcbiAgICB9XG59XG4iXX0=