"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var page_1 = require("ui/page");
var dialogs = require("ui/dialogs");
var enums_1 = require("ui/enums");
var card_service_1 = require("../services/cards/card.service");
var rule_service_1 = require("../services/rules/rule.service");
var HomeComponent = /** @class */ (function () {
    function HomeComponent(page, CardsService, RuleService) {
        this.page = page;
        this.CardsService = CardsService;
        this.RuleService = RuleService;
        this.cardsCount = 0;
        this.currentCardId = 0;
        page.actionBarHidden = true;
        this.change();
    }
    HomeComponent.prototype.ngOnInit = function () {
        this.cardsCount = this.CardsService.getCount() + 0;
        this.dragImageItem = this.dragImage.nativeElement;
        this.dragImageItem.translateX = 0;
        this.dragImageItem.translateY = 0;
        this.dragImageItem.scaleX = 1;
        this.dragImageItem.scaleY = 1;
    };
    HomeComponent.prototype.change = function () {
        var card = this.CardsService.chooseCard();
        if (card === false) {
            dialogs.alert({
                title: 'Refresh',
                message: 'The deck is empty, redresh the game!',
                okButtonText: "Ok"
            });
            this.currentCardId = 0;
            this.page.css = "#card{display: none! important}";
            return;
        }
        this.currentCardId = card.id;
        var suitIndex = card.suit.index;
        var width = (card.id - 1) * 782 * (-1);
        var height = (suitIndex) * 1050;
        this.page.css = "#card{ width: 300wv; height: 400vh; background: url(~/assets/images/cards.png) " + width + " " + height + ";background-size: 1291% 400%;}";
        this.cardsCount = this.CardsService.getCount() + 0;
    };
    HomeComponent.prototype.onPan = function (args) {
        var _this = this;
        if (args.state === 1) {
            this.prevDeltaX = 0;
            this.prevDeltaY = 0;
        }
        else if (args.state === 2) {
            this.dragImageItem.translateX += args.deltaX - this.prevDeltaX;
            this.dragImageItem.translateY += args.deltaY - this.prevDeltaY;
            this.prevDeltaX = args.deltaX;
            this.prevDeltaY = args.deltaY;
        }
        else if (args.state === 3) {
            if (-50 <= args.deltaX && args.deltaX <= 50 && args.deltaY <= 50 && args.deltaY >= -50) {
                this.dragImageItem.animate({
                    translate: { x: 0, y: 0 },
                    duration: 300,
                    curve: enums_1.AnimationCurve.cubicBezier(0.1, 0.1, 0.1, 1)
                });
            }
            else {
                if (this.dragImageItem.translateX >= 0) {
                    this.prevDeltaX = this.dragImageItem.translateX + 300;
                }
                else {
                    this.prevDeltaX = this.dragImageItem.translateX - 300;
                }
                if (this.dragImageItem.translateY >= 0) {
                    this.prevDeltaY = this.dragImageItem.translateY + 300;
                }
                else {
                    this.prevDeltaY = this.dragImageItem.translateX - 300;
                }
                this.dragImageItem.animate({
                    translate: { x: this.prevDeltaX, y: this.prevDeltaY },
                    duration: 300,
                    curve: enums_1.AnimationCurve.cubicBezier(0.1, 0.1, 0.1, 1)
                }).then(function () {
                    _this.change();
                    _this.dragImageItem.translateY = 0;
                    _this.dragImageItem.translateX = 0;
                    _this.prevDeltaX = 0;
                    _this.prevDeltaY = 0;
                });
            }
        }
    };
    HomeComponent.prototype.refresh = function () {
        var self = this;
        dialogs.confirm({
            title: "Are you sure?",
            message: "Do you really want to start again?",
            okButtonText: "Yes",
            cancelButtonText: "No"
        }).then(function (response) {
            if (response) {
                self.CardsService.refresh();
                self.change();
                self.cardsCount = self.CardsService.getCount() + 0;
            }
        });
    };
    HomeComponent.prototype.info = function () {
        var rule = this.RuleService.getRule(this.currentCardId - 1);
        dialogs.alert({
            title: rule['title'],
            message: rule['rule'],
            okButtonText: "Ok"
        });
    };
    __decorate([
        core_1.ViewChild("card"),
        __metadata("design:type", core_1.ElementRef)
    ], HomeComponent.prototype, "dragImage", void 0);
    HomeComponent = __decorate([
        core_1.Component({
            selector: "Home",
            moduleId: module.id,
            templateUrl: "./home.component.html"
        }),
        __param(1, core_1.Inject(card_service_1.CardService)),
        __param(2, core_1.Inject(rule_service_1.RuleService)),
        __metadata("design:paramtypes", [page_1.Page, Object, Object])
    ], HomeComponent);
    return HomeComponent;
}());
exports.HomeComponent = HomeComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9tZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJob21lLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUErRTtBQUMvRSxnQ0FBK0I7QUFDL0Isb0NBQXNDO0FBR3RDLGtDQUEwQztBQUUxQywrREFBNkQ7QUFDN0QsK0RBQTZEO0FBTzdEO0lBU0ksdUJBQW9CLElBQVUsRUFDVyxZQUFZLEVBQ1osV0FBVztRQUZoQyxTQUFJLEdBQUosSUFBSSxDQUFNO1FBQ1csaUJBQVksR0FBWixZQUFZLENBQUE7UUFDWixnQkFBVyxHQUFYLFdBQVcsQ0FBQTtRQUw1QyxlQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ2Ysa0JBQWEsR0FBRyxDQUFDLENBQUM7UUFNdEIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFDNUIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxnQ0FBUSxHQUFSO1FBQ0ksSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsYUFBYSxHQUFVLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDO1FBQ3pELElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsOEJBQU0sR0FBTjtRQUNJLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLENBQUM7UUFFMUMsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7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OlsiaW1wb3J0IHtDb21wb25lbnQsIE9uSW5pdCwgSW5qZWN0LCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWZ9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IFBhZ2UgfSBmcm9tIFwidWkvcGFnZVwiO1xyXG5pbXBvcnQgKiBhcyBkaWFsb2dzIGZyb20gXCJ1aS9kaWFsb2dzXCI7XHJcbmltcG9ydCB7IFBhbkdlc3R1cmVFdmVudERhdGEgfSBmcm9tIFwidWkvZ2VzdHVyZXNcIjtcclxuaW1wb3J0IHsgSW1hZ2UgfSBmcm9tIFwidWkvaW1hZ2VcIjtcclxuaW1wb3J0IHsgQW5pbWF0aW9uQ3VydmUgfSBmcm9tIFwidWkvZW51bXNcIjtcclxuXHJcbmltcG9ydCB7IENhcmRTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvY2FyZHMvY2FyZC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUnVsZVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9ydWxlcy9ydWxlLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogXCJIb21lXCIsXHJcbiAgICBtb2R1bGVJZDogbW9kdWxlLmlkLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiLi9ob21lLmNvbXBvbmVudC5odG1sXCJcclxufSlcclxuZXhwb3J0IGNsYXNzIEhvbWVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gICAgQFZpZXdDaGlsZChcImNhcmRcIikgZHJhZ0ltYWdlOiBFbGVtZW50UmVmO1xyXG4gICAgZHJhZ0ltYWdlSXRlbTogSW1hZ2U7XHJcbiAgICBwcmV2RGVsdGFYOiBudW1iZXI7XHJcbiAgICBwcmV2RGVsdGFZOiBudW1iZXI7XHJcblxyXG4gICAgcHJpdmF0ZSBjYXJkc0NvdW50ID0gMDtcclxuICAgIHByaXZhdGUgY3VycmVudENhcmRJZCA9IDA7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBwYWdlOiBQYWdlLFxyXG4gICAgICAgICAgICAgICAgQEluamVjdChDYXJkU2VydmljZSkgcHJpdmF0ZSBDYXJkc1NlcnZpY2UsXHJcbiAgICAgICAgICAgICAgICBASW5qZWN0KFJ1bGVTZXJ2aWNlKSBwcml2YXRlIFJ1bGVTZXJ2aWNlXHJcbiAgICApIHtcclxuICAgICAgICBwYWdlLmFjdGlvbkJhckhpZGRlbiA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNhcmRzQ291bnQgPSB0aGlzLkNhcmRzU2VydmljZS5nZXRDb3VudCgpICsgMDtcclxuICAgICAgICB0aGlzLmRyYWdJbWFnZUl0ZW0gPSA8SW1hZ2U+dGhpcy5kcmFnSW1hZ2UubmF0aXZlRWxlbWVudDtcclxuICAgICAgICB0aGlzLmRyYWdJbWFnZUl0ZW0udHJhbnNsYXRlWCA9IDA7XHJcbiAgICAgICAgdGhpcy5kcmFnSW1hZ2VJdGVtLnRyYW5zbGF0ZVkgPSAwO1xyXG4gICAgICAgIHRoaXMuZHJhZ0ltYWdlSXRlbS5zY2FsZVggPSAxO1xyXG4gICAgICAgIHRoaXMuZHJhZ0ltYWdlSXRlbS5zY2FsZVkgPSAxO1xyXG4gICAgfVxyXG5cclxuICAgIGNoYW5nZSgpIHtcclxuICAgICAgICBsZXQgY2FyZCA9IHRoaXMuQ2FyZHNTZXJ2aWNlLmNob29zZUNhcmQoKTtcclxuXHJcbiAgICAgICAgaWYgKGNhcmQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGRpYWxvZ3MuYWxlcnQoe1xyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICdSZWZyZXNoJyxcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdUaGUgZGVjayBpcyBlbXB0eSwgcmVkcmVzaCB0aGUgZ2FtZSEnLFxyXG4gICAgICAgICAgICAgICAgb2tCdXR0b25UZXh0OiBcIk9rXCJcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudENhcmRJZCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMucGFnZS5jc3MgPSBcIiNjYXJke2Rpc3BsYXk6IG5vbmUhIGltcG9ydGFudH1cIjtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jdXJyZW50Q2FyZElkID0gY2FyZC5pZDtcclxuICAgICAgICBsZXQgc3VpdEluZGV4ID0gY2FyZC5zdWl0LmluZGV4O1xyXG4gICAgICAgIGxldCB3aWR0aCA9IChjYXJkLmlkIC0gMSkgKiA3ODIgKiAoLTEpO1xyXG4gICAgICAgIGxldCBoZWlnaHQgPSAoc3VpdEluZGV4KSAqIDEwNTA7XHJcblxyXG4gICAgICAgIHRoaXMucGFnZS5jc3MgPSBcIiNjYXJkeyB3aWR0aDogMzAwd3Y7IGhlaWdodDogNDAwdmg7IGJhY2tncm91bmQ6IHVybCh+L2Fzc2V0cy9pbWFnZXMvY2FyZHMucG5nKSBcIiArIHdpZHRoICsgXCIgXCIgKyBoZWlnaHQgKyBcIjtiYWNrZ3JvdW5kLXNpemU6IDEyOTElIDQwMCU7fVwiO1xyXG4gICAgICAgIHRoaXMuY2FyZHNDb3VudCA9IHRoaXMuQ2FyZHNTZXJ2aWNlLmdldENvdW50KCkgKyAwO1xyXG4gICAgfVxyXG5cclxuICAgIG9uUGFuKGFyZ3M6IFBhbkdlc3R1cmVFdmVudERhdGEpIHtcclxuICAgICAgICBpZiAoYXJncy5zdGF0ZSA9PT0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLnByZXZEZWx0YVggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnByZXZEZWx0YVkgPSAwO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYXJncy5zdGF0ZSA9PT0gMikge1xyXG4gICAgICAgICAgICB0aGlzLmRyYWdJbWFnZUl0ZW0udHJhbnNsYXRlWCArPSBhcmdzLmRlbHRhWCAtIHRoaXMucHJldkRlbHRhWDtcclxuICAgICAgICAgICAgdGhpcy5kcmFnSW1hZ2VJdGVtLnRyYW5zbGF0ZVkgKz0gYXJncy5kZWx0YVkgLSB0aGlzLnByZXZEZWx0YVk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnByZXZEZWx0YVggPSBhcmdzLmRlbHRhWDtcclxuICAgICAgICAgICAgdGhpcy5wcmV2RGVsdGFZID0gYXJncy5kZWx0YVk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChhcmdzLnN0YXRlID09PSAzKSB7XHJcbiAgICAgICAgICAgIGlmICgtNTAgPD0gYXJncy5kZWx0YVggJiYgYXJncy5kZWx0YVggPD0gNTAgJiYgYXJncy5kZWx0YVkgPD0gNTAgJiYgYXJncy5kZWx0YVkgPj0gLTUwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRyYWdJbWFnZUl0ZW0uYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlOiB7IHg6IDAsIHk6IDB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAzMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgY3VydmU6IEFuaW1hdGlvbkN1cnZlLmN1YmljQmV6aWVyKDAuMSwgMC4xLCAwLjEsIDEpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRyYWdJbWFnZUl0ZW0udHJhbnNsYXRlWCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmV2RGVsdGFYID0gdGhpcy5kcmFnSW1hZ2VJdGVtLnRyYW5zbGF0ZVggKyAzMDA7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJldkRlbHRhWCA9IHRoaXMuZHJhZ0ltYWdlSXRlbS50cmFuc2xhdGVYIC0gMzAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRyYWdJbWFnZUl0ZW0udHJhbnNsYXRlWSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmV2RGVsdGFZID0gdGhpcy5kcmFnSW1hZ2VJdGVtLnRyYW5zbGF0ZVkgKyAzMDA7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJldkRlbHRhWSA9IHRoaXMuZHJhZ0ltYWdlSXRlbS50cmFuc2xhdGVYIC0gMzAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuZHJhZ0ltYWdlSXRlbS5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGU6IHsgeDogdGhpcy5wcmV2RGVsdGFYLCB5OiB0aGlzLnByZXZEZWx0YVkgfSxcclxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMzAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnZlOiBBbmltYXRpb25DdXJ2ZS5jdWJpY0JlemllcigwLjEsIDAuMSwgMC4xLCAxKVxyXG4gICAgICAgICAgICAgICAgfSkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2UoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmFnSW1hZ2VJdGVtLnRyYW5zbGF0ZVkgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhZ0ltYWdlSXRlbS50cmFuc2xhdGVYID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXZEZWx0YVggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJldkRlbHRhWSA9IDA7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZWZyZXNoKCkge1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgZGlhbG9ncy5jb25maXJtKHtcclxuICAgICAgICAgICAgdGl0bGU6IFwiQXJlIHlvdSBzdXJlP1wiLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiBcIkRvIHlvdSByZWFsbHkgd2FudCB0byBzdGFydCBhZ2Fpbj9cIixcclxuICAgICAgICAgICAgb2tCdXR0b25UZXh0OiBcIlllc1wiLFxyXG4gICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcIk5vXCJcclxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICBpZiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuQ2FyZHNTZXJ2aWNlLnJlZnJlc2goKTtcclxuICAgICAgICAgICAgICAgIHNlbGYuY2hhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmNhcmRzQ291bnQgPSBzZWxmLkNhcmRzU2VydmljZS5nZXRDb3VudCgpICsgMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGluZm8oKSB7XHJcbiAgICAgICAgbGV0IHJ1bGUgPSB0aGlzLlJ1bGVTZXJ2aWNlLmdldFJ1bGUodGhpcy5jdXJyZW50Q2FyZElkIC0gMSk7XHJcblxyXG4gICAgICAgIGRpYWxvZ3MuYWxlcnQoe1xyXG4gICAgICAgICAgICB0aXRsZTogcnVsZVsndGl0bGUnXSxcclxuICAgICAgICAgICAgbWVzc2FnZTogcnVsZVsncnVsZSddLFxyXG4gICAgICAgICAgICBva0J1dHRvblRleHQ6IFwiT2tcIlxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==