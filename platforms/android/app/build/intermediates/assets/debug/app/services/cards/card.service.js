"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var data_1 = require("./data");
var CardService = /** @class */ (function () {
    function CardService() {
        this.deck = {};
        this.usedCards = [];
        this.suits = [];
        this.count = 0;
        this.suits = ['H', 'S', 'C', 'D'];
        this.deck[this.suits[0]] = data_1.default.cards;
        this.deck[this.suits[1]] = data_1.default.cards;
        this.deck[this.suits[2]] = data_1.default.cards;
        this.deck[this.suits[3]] = data_1.default.cards;
    }
    CardService.prototype.chooseCard = function () {
        return this.searchCard(Math.floor(Math.random() * 52), 1);
    };
    CardService.prototype.refresh = function () {
        this.usedCards = [];
    };
    CardService.prototype.getCount = function () {
        if (this.count === 0) {
            for (var suit in this.deck) {
                this.count += this.deck[suit].length;
            }
        }
        return this.count - this.usedCards.length;
    };
    CardService.prototype.searchCard = function (cardIndex, times) {
        if (times > 2 || cardIndex > 51) {
            return false;
        }
        else if (cardIndex < 0) {
            return this.searchCard(51, ++times);
        }
        if (this.usedCards.includes(cardIndex)) {
            return this.searchCard(cardIndex - 1, times);
        }
        var suitIndex = Math.floor(cardIndex / 13);
        var index = cardIndex - (suitIndex * 13);
        var card = this.deck[this.suits[suitIndex]][index];
        card['suit'] = this.suits[suitIndex];
        this.usedCards.push(cardIndex);
        return card;
    };
    CardService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], CardService);
    return CardService;
}());
exports.CardService = CardService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2FyZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJDO0FBQzNDLCtCQUEyQjtBQUczQjtJQU1JO1FBTFEsU0FBSSxHQUFHLEVBQUUsQ0FBQztRQUNWLGNBQVMsR0FBRyxFQUFFLENBQUM7UUFDZixVQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ1gsVUFBSyxHQUFHLENBQUMsQ0FBQztRQUdkLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxjQUFLLENBQUMsS0FBSyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLGNBQUssQ0FBQyxLQUFLLENBQUM7UUFDdkMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsY0FBSyxDQUFDLEtBQUssQ0FBQztRQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxjQUFLLENBQUMsS0FBSyxDQUFDO0lBQzNDLENBQUM7SUFFRCxnQ0FBVSxHQUFWO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVELDZCQUFPLEdBQVA7UUFDSSxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsOEJBQVEsR0FBUjtRQUNJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuQixHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDekIsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUN6QyxDQUFDO1FBQ0wsQ0FBQztRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQzlDLENBQUM7SUFFTyxnQ0FBVSxHQUFsQixVQUFtQixTQUFTLEVBQUUsS0FBSztRQUMvQixFQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzlCLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDakIsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN4QyxDQUFDO1FBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDakQsQ0FBQztRQUVELElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQzNDLElBQUksS0FBSyxHQUFHLFNBQVMsR0FBRyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUV6QyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVuRCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUUvQixNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFsRFEsV0FBVztRQUR2QixpQkFBVSxFQUFFOztPQUNBLFdBQVcsQ0FtRHZCO0lBQUQsa0JBQUM7Q0FBQSxBQW5ERCxJQW1EQztBQW5EWSxrQ0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCBjYXJkcyBmcm9tICcuL2RhdGEnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ2FyZFNlcnZpY2Uge1xuICAgIHByaXZhdGUgZGVjayA9IHt9O1xuICAgIHByaXZhdGUgdXNlZENhcmRzID0gW107XG4gICAgcHJpdmF0ZSBzdWl0cyA9IFtdO1xuICAgIHByaXZhdGUgY291bnQgPSAwO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc3VpdHMgPSBbJ0gnLCAnUycsICdDJywgJ0QnXTtcbiAgICAgICAgdGhpcy5kZWNrW3RoaXMuc3VpdHNbMF1dID0gY2FyZHMuY2FyZHM7XG4gICAgICAgIHRoaXMuZGVja1t0aGlzLnN1aXRzWzFdXSA9IGNhcmRzLmNhcmRzO1xuICAgICAgICB0aGlzLmRlY2tbdGhpcy5zdWl0c1syXV0gPSBjYXJkcy5jYXJkcztcbiAgICAgICAgdGhpcy5kZWNrW3RoaXMuc3VpdHNbM11dID0gY2FyZHMuY2FyZHM7XG4gICAgfVxuXG4gICAgY2hvb3NlQ2FyZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoQ2FyZChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA1MiksIDEpO1xuICAgIH1cblxuICAgIHJlZnJlc2goKSB7XG4gICAgICAgIHRoaXMudXNlZENhcmRzID0gW107XG4gICAgfVxuXG4gICAgZ2V0Q291bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBzdWl0IGluIHRoaXMuZGVjaykge1xuICAgICAgICAgICAgICAgIHRoaXMuY291bnQgKz0gdGhpcy5kZWNrW3N1aXRdLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNvdW50IC0gdGhpcy51c2VkQ2FyZHMubGVuZ3RoO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2VhcmNoQ2FyZChjYXJkSW5kZXgsIHRpbWVzKSB7XG4gICAgICAgIGlmICh0aW1lcyA+IDIgfHwgY2FyZEluZGV4ID4gNTEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChjYXJkSW5kZXggPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZWFyY2hDYXJkKDUxLCArK3RpbWVzKTtcbiAgICAgICAgfSBpZiAodGhpcy51c2VkQ2FyZHMuaW5jbHVkZXMoY2FyZEluZGV4KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoQ2FyZChjYXJkSW5kZXggLSAxLCB0aW1lcyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc3VpdEluZGV4ID0gTWF0aC5mbG9vcihjYXJkSW5kZXggLyAxMyk7XG4gICAgICAgIGxldCBpbmRleCA9IGNhcmRJbmRleCAtIChzdWl0SW5kZXggKiAxMyk7XG5cbiAgICAgICAgbGV0IGNhcmQgPSB0aGlzLmRlY2tbdGhpcy5zdWl0c1tzdWl0SW5kZXhdXVtpbmRleF07XG5cbiAgICAgICAgY2FyZFsnc3VpdCddID0gdGhpcy5zdWl0c1tzdWl0SW5kZXhdO1xuICAgICAgICB0aGlzLnVzZWRDYXJkcy5wdXNoKGNhcmRJbmRleCk7XG5cbiAgICAgICAgcmV0dXJuIGNhcmQ7XG4gICAgfVxufVxuIl19